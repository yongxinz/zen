// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysDeptFieldNames          = builder.RawFieldNames(&SysDept{})
	sysDeptRows                = strings.Join(sysDeptFieldNames, ",")
	sysDeptRowsExpectAutoSet   = strings.Join(stringx.Remove(sysDeptFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysDeptRowsWithPlaceHolder = strings.Join(stringx.Remove(sysDeptFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSysDeptIdPrefix = "cache:sysDept:id:"
)

type (
	sysDeptModel interface {
		Insert(ctx context.Context, data *SysDept) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysDept, error)
		Update(ctx context.Context, data *SysDept) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysDeptModel struct {
		sqlc.CachedConn
		table string
	}

	SysDept struct {
		Id        int64          `db:"id"`
		ParentId  sql.NullInt64  `db:"parent_id"`
		DeptPath  string         `db:"dept_path"`
		DeptName  sql.NullString `db:"dept_name"`
		Sort      sql.NullInt64  `db:"sort"`
		Leader    sql.NullString `db:"leader"`
		Phone     sql.NullString `db:"phone"`
		Email     sql.NullString `db:"email"`
		Status    sql.NullInt64  `db:"status"`
		CreateBy  sql.NullInt64  `db:"create_by"`  // 创建者
		UpdateBy  sql.NullInt64  `db:"update_by"`  // 更新者
		CreatedAt sql.NullTime   `db:"created_at"` // 创建时间
		UpdatedAt sql.NullTime   `db:"updated_at"` // 最后更新时间
	}
)

func newSysDeptModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysDeptModel {
	return &defaultSysDeptModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_dept`",
	}
}

func (m *defaultSysDeptModel) withSession(session sqlx.Session) *defaultSysDeptModel {
	return &defaultSysDeptModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`sys_dept`",
	}
}

func (m *defaultSysDeptModel) Delete(ctx context.Context, id int64) error {
	sysDeptIdKey := fmt.Sprintf("%s%v", cacheSysDeptIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, sysDeptIdKey)
	return err
}

func (m *defaultSysDeptModel) FindOne(ctx context.Context, id int64) (*SysDept, error) {
	sysDeptIdKey := fmt.Sprintf("%s%v", cacheSysDeptIdPrefix, id)
	var resp SysDept
	err := m.QueryRowCtx(ctx, &resp, sysDeptIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysDeptRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysDeptModel) Insert(ctx context.Context, data *SysDept) (sql.Result, error) {
	sysDeptIdKey := fmt.Sprintf("%s%v", cacheSysDeptIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysDeptRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.DeptPath, data.DeptName, data.Sort, data.Leader, data.Phone, data.Email, data.Status, data.CreateBy, data.UpdateBy)
	}, sysDeptIdKey)
	return ret, err
}

func (m *defaultSysDeptModel) Update(ctx context.Context, data *SysDept) error {
	sysDeptIdKey := fmt.Sprintf("%s%v", cacheSysDeptIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysDeptRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ParentId, data.DeptPath, data.DeptName, data.Sort, data.Leader, data.Phone, data.Email, data.Status, data.CreateBy, data.UpdateBy, data.Id)
	}, sysDeptIdKey)
	return err
}

func (m *defaultSysDeptModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSysDeptIdPrefix, primary)
}

func (m *defaultSysDeptModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysDeptRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysDeptModel) tableName() string {
	return m.table
}
