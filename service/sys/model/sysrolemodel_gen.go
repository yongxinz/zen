// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysRoleFieldNames          = builder.RawFieldNames(&SysRole{})
	sysRoleRows                = strings.Join(sysRoleFieldNames, ",")
	sysRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(sysRoleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(sysRoleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheSysRoleIdPrefix = "cache:sysRole:id:"
)

type (
	sysRoleModel interface {
		Insert(ctx context.Context, data *SysRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysRole, error)
		Update(ctx context.Context, data *SysRole) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysRoleModel struct {
		sqlc.CachedConn
		table string
	}

	SysRole struct {
		Id        int64     `db:"id"`         // 编码
		RoleName  string    `db:"role_name"`  // 角色名称
		RoleKey   string    `db:"role_key"`   // 权限字符
		Sort      int64     `db:"sort"`       // 排序
		Remark    string    `db:"remark"`     // 备注
		Status    int64     `db:"status"`     // 状态
		CreateBy  int64     `db:"create_by"`  // 创建者
		UpdateBy  int64     `db:"update_by"`  // 更新者
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newSysRoleModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysRoleModel {
	return &defaultSysRoleModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_role`",
	}
}

func (m *defaultSysRoleModel) withSession(session sqlx.Session) *defaultSysRoleModel {
	return &defaultSysRoleModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`sys_role`",
	}
}

func (m *defaultSysRoleModel) Delete(ctx context.Context, id int64) error {
	sysRoleIdKey := fmt.Sprintf("%s%v", cacheSysRoleIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, sysRoleIdKey)
	return err
}

func (m *defaultSysRoleModel) FindOne(ctx context.Context, id int64) (*SysRole, error) {
	sysRoleIdKey := fmt.Sprintf("%s%v", cacheSysRoleIdPrefix, id)
	var resp SysRole
	err := m.QueryRowCtx(ctx, &resp, sysRoleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRoleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRoleModel) Insert(ctx context.Context, data *SysRole) (sql.Result, error) {
	sysRoleIdKey := fmt.Sprintf("%s%v", cacheSysRoleIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, sysRoleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RoleName, data.RoleKey, data.Sort, data.Remark, data.Status, data.CreateBy, data.UpdateBy)
	}, sysRoleIdKey)
	return ret, err
}

func (m *defaultSysRoleModel) Update(ctx context.Context, data *SysRole) error {
	sysRoleIdKey := fmt.Sprintf("%s%v", cacheSysRoleIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysRoleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.RoleName, data.RoleKey, data.Sort, data.Remark, data.Status, data.CreateBy, data.UpdateBy, data.Id)
	}, sysRoleIdKey)
	return err
}

func (m *defaultSysRoleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheSysRoleIdPrefix, primary)
}

func (m *defaultSysRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRoleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysRoleModel) tableName() string {
	return m.table
}
