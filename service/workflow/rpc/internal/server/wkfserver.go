// Code generated by goctl. DO NOT EDIT.
// Source: wkf.proto

package server

import (
	"context"

	"github.com/yongxin/zen/service/workflow/rpc/internal/logic"
	"github.com/yongxin/zen/service/workflow/rpc/internal/svc"
	"github.com/yongxin/zen/service/workflow/rpc/wkf"
)

type WkfServer struct {
	svcCtx *svc.ServiceContext
	wkf.UnimplementedWkfServer
}

func NewWkfServer(svcCtx *svc.ServiceContext) *WkfServer {
	return &WkfServer{
		svcCtx: svcCtx,
	}
}

func (s *WkfServer) ClassifyList(ctx context.Context, in *wkf.ClassifyListReq) (*wkf.ClassifyListResp, error) {
	l := logic.NewClassifyListLogic(ctx, s.svcCtx)
	return l.ClassifyList(in)
}

func (s *WkfServer) ClassifyRetrieve(ctx context.Context, in *wkf.ClassifyRetrieveReq) (*wkf.ClassifyRetrieveResp, error) {
	l := logic.NewClassifyRetrieveLogic(ctx, s.svcCtx)
	return l.ClassifyRetrieve(in)
}

func (s *WkfServer) ClassifyAdd(ctx context.Context, in *wkf.ClassifyAddReq) (*wkf.ClassifyAddResp, error) {
	l := logic.NewClassifyAddLogic(ctx, s.svcCtx)
	return l.ClassifyAdd(in)
}

func (s *WkfServer) ClassifyUpdate(ctx context.Context, in *wkf.ClassifyUpdateReq) (*wkf.ClassifyUpdateResp, error) {
	l := logic.NewClassifyUpdateLogic(ctx, s.svcCtx)
	return l.ClassifyUpdate(in)
}

func (s *WkfServer) ClassifyDelete(ctx context.Context, in *wkf.ClassifyDeleteReq) (*wkf.ClassifyDeleteResp, error) {
	l := logic.NewClassifyDeleteLogic(ctx, s.svcCtx)
	return l.ClassifyDelete(in)
}
