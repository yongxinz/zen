// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: wkf.proto

package wkf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WkfClient is the client API for Wkf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WkfClient interface {
	ClassifyList(ctx context.Context, in *ClassifyListReq, opts ...grpc.CallOption) (*ClassifyListResp, error)
	ClassifyRetrieve(ctx context.Context, in *ClassifyRetrieveReq, opts ...grpc.CallOption) (*ClassifyRetrieveResp, error)
	ClassifyAdd(ctx context.Context, in *ClassifyAddReq, opts ...grpc.CallOption) (*ClassifyAddResp, error)
	ClassifyUpdate(ctx context.Context, in *ClassifyUpdateReq, opts ...grpc.CallOption) (*ClassifyUpdateResp, error)
	ClassifyDelete(ctx context.Context, in *ClassifyDeleteReq, opts ...grpc.CallOption) (*ClassifyDeleteResp, error)
	TemplateList(ctx context.Context, in *TemplateListReq, opts ...grpc.CallOption) (*TemplateListResp, error)
	TemplateRetrieve(ctx context.Context, in *TemplateRetrieveReq, opts ...grpc.CallOption) (*TemplateRetrieveResp, error)
	TemplateAdd(ctx context.Context, in *TemplateAddReq, opts ...grpc.CallOption) (*TemplateAddResp, error)
	TemplateUpdate(ctx context.Context, in *TemplateUpdateReq, opts ...grpc.CallOption) (*TemplateUpdateResp, error)
	TemplateDelete(ctx context.Context, in *TemplateDeleteReq, opts ...grpc.CallOption) (*TemplateDeleteResp, error)
	TaskList(ctx context.Context, in *TaskListReq, opts ...grpc.CallOption) (*TaskListResp, error)
	TaskRetrieve(ctx context.Context, in *TaskRetrieveReq, opts ...grpc.CallOption) (*TaskRetrieveResp, error)
	TaskAdd(ctx context.Context, in *TaskAddReq, opts ...grpc.CallOption) (*TaskAddResp, error)
	TaskUpdate(ctx context.Context, in *TaskUpdateReq, opts ...grpc.CallOption) (*TaskUpdateResp, error)
	TaskDelete(ctx context.Context, in *TaskDeleteReq, opts ...grpc.CallOption) (*TaskDeleteResp, error)
	ProcessList(ctx context.Context, in *ProcessListReq, opts ...grpc.CallOption) (*ProcessListResp, error)
	ProcessRetrieve(ctx context.Context, in *ProcessRetrieveReq, opts ...grpc.CallOption) (*ProcessRetrieveResp, error)
	ProcessAdd(ctx context.Context, in *ProcessAddReq, opts ...grpc.CallOption) (*ProcessAddResp, error)
	ProcessUpdate(ctx context.Context, in *ProcessUpdateReq, opts ...grpc.CallOption) (*ProcessUpdateResp, error)
	ProcessDelete(ctx context.Context, in *ProcessDeleteReq, opts ...grpc.CallOption) (*ProcessDeleteResp, error)
	ProcessClassify(ctx context.Context, in *ProcessClassifyReq, opts ...grpc.CallOption) (*ProcessClassifyResp, error)
}

type wkfClient struct {
	cc grpc.ClientConnInterface
}

func NewWkfClient(cc grpc.ClientConnInterface) WkfClient {
	return &wkfClient{cc}
}

func (c *wkfClient) ClassifyList(ctx context.Context, in *ClassifyListReq, opts ...grpc.CallOption) (*ClassifyListResp, error) {
	out := new(ClassifyListResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ClassifyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ClassifyRetrieve(ctx context.Context, in *ClassifyRetrieveReq, opts ...grpc.CallOption) (*ClassifyRetrieveResp, error) {
	out := new(ClassifyRetrieveResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ClassifyRetrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ClassifyAdd(ctx context.Context, in *ClassifyAddReq, opts ...grpc.CallOption) (*ClassifyAddResp, error) {
	out := new(ClassifyAddResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ClassifyAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ClassifyUpdate(ctx context.Context, in *ClassifyUpdateReq, opts ...grpc.CallOption) (*ClassifyUpdateResp, error) {
	out := new(ClassifyUpdateResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ClassifyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ClassifyDelete(ctx context.Context, in *ClassifyDeleteReq, opts ...grpc.CallOption) (*ClassifyDeleteResp, error) {
	out := new(ClassifyDeleteResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ClassifyDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) TemplateList(ctx context.Context, in *TemplateListReq, opts ...grpc.CallOption) (*TemplateListResp, error) {
	out := new(TemplateListResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/TemplateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) TemplateRetrieve(ctx context.Context, in *TemplateRetrieveReq, opts ...grpc.CallOption) (*TemplateRetrieveResp, error) {
	out := new(TemplateRetrieveResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/TemplateRetrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) TemplateAdd(ctx context.Context, in *TemplateAddReq, opts ...grpc.CallOption) (*TemplateAddResp, error) {
	out := new(TemplateAddResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/TemplateAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) TemplateUpdate(ctx context.Context, in *TemplateUpdateReq, opts ...grpc.CallOption) (*TemplateUpdateResp, error) {
	out := new(TemplateUpdateResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/TemplateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) TemplateDelete(ctx context.Context, in *TemplateDeleteReq, opts ...grpc.CallOption) (*TemplateDeleteResp, error) {
	out := new(TemplateDeleteResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/TemplateDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) TaskList(ctx context.Context, in *TaskListReq, opts ...grpc.CallOption) (*TaskListResp, error) {
	out := new(TaskListResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/TaskList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) TaskRetrieve(ctx context.Context, in *TaskRetrieveReq, opts ...grpc.CallOption) (*TaskRetrieveResp, error) {
	out := new(TaskRetrieveResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/TaskRetrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) TaskAdd(ctx context.Context, in *TaskAddReq, opts ...grpc.CallOption) (*TaskAddResp, error) {
	out := new(TaskAddResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/TaskAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) TaskUpdate(ctx context.Context, in *TaskUpdateReq, opts ...grpc.CallOption) (*TaskUpdateResp, error) {
	out := new(TaskUpdateResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/TaskUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) TaskDelete(ctx context.Context, in *TaskDeleteReq, opts ...grpc.CallOption) (*TaskDeleteResp, error) {
	out := new(TaskDeleteResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/TaskDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ProcessList(ctx context.Context, in *ProcessListReq, opts ...grpc.CallOption) (*ProcessListResp, error) {
	out := new(ProcessListResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ProcessList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ProcessRetrieve(ctx context.Context, in *ProcessRetrieveReq, opts ...grpc.CallOption) (*ProcessRetrieveResp, error) {
	out := new(ProcessRetrieveResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ProcessRetrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ProcessAdd(ctx context.Context, in *ProcessAddReq, opts ...grpc.CallOption) (*ProcessAddResp, error) {
	out := new(ProcessAddResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ProcessAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ProcessUpdate(ctx context.Context, in *ProcessUpdateReq, opts ...grpc.CallOption) (*ProcessUpdateResp, error) {
	out := new(ProcessUpdateResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ProcessUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ProcessDelete(ctx context.Context, in *ProcessDeleteReq, opts ...grpc.CallOption) (*ProcessDeleteResp, error) {
	out := new(ProcessDeleteResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ProcessDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ProcessClassify(ctx context.Context, in *ProcessClassifyReq, opts ...grpc.CallOption) (*ProcessClassifyResp, error) {
	out := new(ProcessClassifyResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ProcessClassify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WkfServer is the server API for Wkf service.
// All implementations must embed UnimplementedWkfServer
// for forward compatibility
type WkfServer interface {
	ClassifyList(context.Context, *ClassifyListReq) (*ClassifyListResp, error)
	ClassifyRetrieve(context.Context, *ClassifyRetrieveReq) (*ClassifyRetrieveResp, error)
	ClassifyAdd(context.Context, *ClassifyAddReq) (*ClassifyAddResp, error)
	ClassifyUpdate(context.Context, *ClassifyUpdateReq) (*ClassifyUpdateResp, error)
	ClassifyDelete(context.Context, *ClassifyDeleteReq) (*ClassifyDeleteResp, error)
	TemplateList(context.Context, *TemplateListReq) (*TemplateListResp, error)
	TemplateRetrieve(context.Context, *TemplateRetrieveReq) (*TemplateRetrieveResp, error)
	TemplateAdd(context.Context, *TemplateAddReq) (*TemplateAddResp, error)
	TemplateUpdate(context.Context, *TemplateUpdateReq) (*TemplateUpdateResp, error)
	TemplateDelete(context.Context, *TemplateDeleteReq) (*TemplateDeleteResp, error)
	TaskList(context.Context, *TaskListReq) (*TaskListResp, error)
	TaskRetrieve(context.Context, *TaskRetrieveReq) (*TaskRetrieveResp, error)
	TaskAdd(context.Context, *TaskAddReq) (*TaskAddResp, error)
	TaskUpdate(context.Context, *TaskUpdateReq) (*TaskUpdateResp, error)
	TaskDelete(context.Context, *TaskDeleteReq) (*TaskDeleteResp, error)
	ProcessList(context.Context, *ProcessListReq) (*ProcessListResp, error)
	ProcessRetrieve(context.Context, *ProcessRetrieveReq) (*ProcessRetrieveResp, error)
	ProcessAdd(context.Context, *ProcessAddReq) (*ProcessAddResp, error)
	ProcessUpdate(context.Context, *ProcessUpdateReq) (*ProcessUpdateResp, error)
	ProcessDelete(context.Context, *ProcessDeleteReq) (*ProcessDeleteResp, error)
	ProcessClassify(context.Context, *ProcessClassifyReq) (*ProcessClassifyResp, error)
	mustEmbedUnimplementedWkfServer()
}

// UnimplementedWkfServer must be embedded to have forward compatible implementations.
type UnimplementedWkfServer struct {
}

func (UnimplementedWkfServer) ClassifyList(context.Context, *ClassifyListReq) (*ClassifyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyList not implemented")
}
func (UnimplementedWkfServer) ClassifyRetrieve(context.Context, *ClassifyRetrieveReq) (*ClassifyRetrieveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyRetrieve not implemented")
}
func (UnimplementedWkfServer) ClassifyAdd(context.Context, *ClassifyAddReq) (*ClassifyAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyAdd not implemented")
}
func (UnimplementedWkfServer) ClassifyUpdate(context.Context, *ClassifyUpdateReq) (*ClassifyUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyUpdate not implemented")
}
func (UnimplementedWkfServer) ClassifyDelete(context.Context, *ClassifyDeleteReq) (*ClassifyDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyDelete not implemented")
}
func (UnimplementedWkfServer) TemplateList(context.Context, *TemplateListReq) (*TemplateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateList not implemented")
}
func (UnimplementedWkfServer) TemplateRetrieve(context.Context, *TemplateRetrieveReq) (*TemplateRetrieveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateRetrieve not implemented")
}
func (UnimplementedWkfServer) TemplateAdd(context.Context, *TemplateAddReq) (*TemplateAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateAdd not implemented")
}
func (UnimplementedWkfServer) TemplateUpdate(context.Context, *TemplateUpdateReq) (*TemplateUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateUpdate not implemented")
}
func (UnimplementedWkfServer) TemplateDelete(context.Context, *TemplateDeleteReq) (*TemplateDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateDelete not implemented")
}
func (UnimplementedWkfServer) TaskList(context.Context, *TaskListReq) (*TaskListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskList not implemented")
}
func (UnimplementedWkfServer) TaskRetrieve(context.Context, *TaskRetrieveReq) (*TaskRetrieveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskRetrieve not implemented")
}
func (UnimplementedWkfServer) TaskAdd(context.Context, *TaskAddReq) (*TaskAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAdd not implemented")
}
func (UnimplementedWkfServer) TaskUpdate(context.Context, *TaskUpdateReq) (*TaskUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskUpdate not implemented")
}
func (UnimplementedWkfServer) TaskDelete(context.Context, *TaskDeleteReq) (*TaskDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskDelete not implemented")
}
func (UnimplementedWkfServer) ProcessList(context.Context, *ProcessListReq) (*ProcessListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessList not implemented")
}
func (UnimplementedWkfServer) ProcessRetrieve(context.Context, *ProcessRetrieveReq) (*ProcessRetrieveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRetrieve not implemented")
}
func (UnimplementedWkfServer) ProcessAdd(context.Context, *ProcessAddReq) (*ProcessAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessAdd not implemented")
}
func (UnimplementedWkfServer) ProcessUpdate(context.Context, *ProcessUpdateReq) (*ProcessUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessUpdate not implemented")
}
func (UnimplementedWkfServer) ProcessDelete(context.Context, *ProcessDeleteReq) (*ProcessDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDelete not implemented")
}
func (UnimplementedWkfServer) ProcessClassify(context.Context, *ProcessClassifyReq) (*ProcessClassifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessClassify not implemented")
}
func (UnimplementedWkfServer) mustEmbedUnimplementedWkfServer() {}

// UnsafeWkfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WkfServer will
// result in compilation errors.
type UnsafeWkfServer interface {
	mustEmbedUnimplementedWkfServer()
}

func RegisterWkfServer(s grpc.ServiceRegistrar, srv WkfServer) {
	s.RegisterService(&Wkf_ServiceDesc, srv)
}

func _Wkf_ClassifyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ClassifyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ClassifyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ClassifyList(ctx, req.(*ClassifyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ClassifyRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyRetrieveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ClassifyRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ClassifyRetrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ClassifyRetrieve(ctx, req.(*ClassifyRetrieveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ClassifyAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ClassifyAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ClassifyAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ClassifyAdd(ctx, req.(*ClassifyAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ClassifyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ClassifyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ClassifyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ClassifyUpdate(ctx, req.(*ClassifyUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ClassifyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ClassifyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ClassifyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ClassifyDelete(ctx, req.(*ClassifyDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_TemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).TemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/TemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).TemplateList(ctx, req.(*TemplateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_TemplateRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRetrieveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).TemplateRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/TemplateRetrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).TemplateRetrieve(ctx, req.(*TemplateRetrieveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_TemplateAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).TemplateAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/TemplateAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).TemplateAdd(ctx, req.(*TemplateAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_TemplateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).TemplateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/TemplateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).TemplateUpdate(ctx, req.(*TemplateUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_TemplateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).TemplateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/TemplateDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).TemplateDelete(ctx, req.(*TemplateDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_TaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).TaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/TaskList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).TaskList(ctx, req.(*TaskListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_TaskRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRetrieveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).TaskRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/TaskRetrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).TaskRetrieve(ctx, req.(*TaskRetrieveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_TaskAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).TaskAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/TaskAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).TaskAdd(ctx, req.(*TaskAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_TaskUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).TaskUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/TaskUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).TaskUpdate(ctx, req.(*TaskUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_TaskDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).TaskDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/TaskDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).TaskDelete(ctx, req.(*TaskDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ProcessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ProcessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ProcessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ProcessList(ctx, req.(*ProcessListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ProcessRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRetrieveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ProcessRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ProcessRetrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ProcessRetrieve(ctx, req.(*ProcessRetrieveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ProcessAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ProcessAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ProcessAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ProcessAdd(ctx, req.(*ProcessAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ProcessUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ProcessUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ProcessUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ProcessUpdate(ctx, req.(*ProcessUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ProcessDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ProcessDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ProcessDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ProcessDelete(ctx, req.(*ProcessDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ProcessClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessClassifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ProcessClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ProcessClassify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ProcessClassify(ctx, req.(*ProcessClassifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Wkf_ServiceDesc is the grpc.ServiceDesc for Wkf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wkf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wkf.Wkf",
	HandlerType: (*WkfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassifyList",
			Handler:    _Wkf_ClassifyList_Handler,
		},
		{
			MethodName: "ClassifyRetrieve",
			Handler:    _Wkf_ClassifyRetrieve_Handler,
		},
		{
			MethodName: "ClassifyAdd",
			Handler:    _Wkf_ClassifyAdd_Handler,
		},
		{
			MethodName: "ClassifyUpdate",
			Handler:    _Wkf_ClassifyUpdate_Handler,
		},
		{
			MethodName: "ClassifyDelete",
			Handler:    _Wkf_ClassifyDelete_Handler,
		},
		{
			MethodName: "TemplateList",
			Handler:    _Wkf_TemplateList_Handler,
		},
		{
			MethodName: "TemplateRetrieve",
			Handler:    _Wkf_TemplateRetrieve_Handler,
		},
		{
			MethodName: "TemplateAdd",
			Handler:    _Wkf_TemplateAdd_Handler,
		},
		{
			MethodName: "TemplateUpdate",
			Handler:    _Wkf_TemplateUpdate_Handler,
		},
		{
			MethodName: "TemplateDelete",
			Handler:    _Wkf_TemplateDelete_Handler,
		},
		{
			MethodName: "TaskList",
			Handler:    _Wkf_TaskList_Handler,
		},
		{
			MethodName: "TaskRetrieve",
			Handler:    _Wkf_TaskRetrieve_Handler,
		},
		{
			MethodName: "TaskAdd",
			Handler:    _Wkf_TaskAdd_Handler,
		},
		{
			MethodName: "TaskUpdate",
			Handler:    _Wkf_TaskUpdate_Handler,
		},
		{
			MethodName: "TaskDelete",
			Handler:    _Wkf_TaskDelete_Handler,
		},
		{
			MethodName: "ProcessList",
			Handler:    _Wkf_ProcessList_Handler,
		},
		{
			MethodName: "ProcessRetrieve",
			Handler:    _Wkf_ProcessRetrieve_Handler,
		},
		{
			MethodName: "ProcessAdd",
			Handler:    _Wkf_ProcessAdd_Handler,
		},
		{
			MethodName: "ProcessUpdate",
			Handler:    _Wkf_ProcessUpdate_Handler,
		},
		{
			MethodName: "ProcessDelete",
			Handler:    _Wkf_ProcessDelete_Handler,
		},
		{
			MethodName: "ProcessClassify",
			Handler:    _Wkf_ProcessClassify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wkf.proto",
}
