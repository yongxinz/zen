// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: wkf.proto

package wkf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WkfClient is the client API for Wkf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WkfClient interface {
	ClassifyList(ctx context.Context, in *ClassifyListReq, opts ...grpc.CallOption) (*ClassifyListResp, error)
	ClassifyRetrieve(ctx context.Context, in *ClassifyRetrieveReq, opts ...grpc.CallOption) (*ClassifyRetrieveResp, error)
	ClassifyAdd(ctx context.Context, in *ClassifyAddReq, opts ...grpc.CallOption) (*ClassifyAddResp, error)
	ClassifyUpdate(ctx context.Context, in *ClassifyUpdateReq, opts ...grpc.CallOption) (*ClassifyUpdateResp, error)
	ClassifyDelete(ctx context.Context, in *ClassifyDeleteReq, opts ...grpc.CallOption) (*ClassifyDeleteResp, error)
}

type wkfClient struct {
	cc grpc.ClientConnInterface
}

func NewWkfClient(cc grpc.ClientConnInterface) WkfClient {
	return &wkfClient{cc}
}

func (c *wkfClient) ClassifyList(ctx context.Context, in *ClassifyListReq, opts ...grpc.CallOption) (*ClassifyListResp, error) {
	out := new(ClassifyListResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ClassifyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ClassifyRetrieve(ctx context.Context, in *ClassifyRetrieveReq, opts ...grpc.CallOption) (*ClassifyRetrieveResp, error) {
	out := new(ClassifyRetrieveResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ClassifyRetrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ClassifyAdd(ctx context.Context, in *ClassifyAddReq, opts ...grpc.CallOption) (*ClassifyAddResp, error) {
	out := new(ClassifyAddResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ClassifyAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ClassifyUpdate(ctx context.Context, in *ClassifyUpdateReq, opts ...grpc.CallOption) (*ClassifyUpdateResp, error) {
	out := new(ClassifyUpdateResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ClassifyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wkfClient) ClassifyDelete(ctx context.Context, in *ClassifyDeleteReq, opts ...grpc.CallOption) (*ClassifyDeleteResp, error) {
	out := new(ClassifyDeleteResp)
	err := c.cc.Invoke(ctx, "/wkf.Wkf/ClassifyDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WkfServer is the server API for Wkf service.
// All implementations must embed UnimplementedWkfServer
// for forward compatibility
type WkfServer interface {
	ClassifyList(context.Context, *ClassifyListReq) (*ClassifyListResp, error)
	ClassifyRetrieve(context.Context, *ClassifyRetrieveReq) (*ClassifyRetrieveResp, error)
	ClassifyAdd(context.Context, *ClassifyAddReq) (*ClassifyAddResp, error)
	ClassifyUpdate(context.Context, *ClassifyUpdateReq) (*ClassifyUpdateResp, error)
	ClassifyDelete(context.Context, *ClassifyDeleteReq) (*ClassifyDeleteResp, error)
	mustEmbedUnimplementedWkfServer()
}

// UnimplementedWkfServer must be embedded to have forward compatible implementations.
type UnimplementedWkfServer struct {
}

func (UnimplementedWkfServer) ClassifyList(context.Context, *ClassifyListReq) (*ClassifyListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyList not implemented")
}
func (UnimplementedWkfServer) ClassifyRetrieve(context.Context, *ClassifyRetrieveReq) (*ClassifyRetrieveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyRetrieve not implemented")
}
func (UnimplementedWkfServer) ClassifyAdd(context.Context, *ClassifyAddReq) (*ClassifyAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyAdd not implemented")
}
func (UnimplementedWkfServer) ClassifyUpdate(context.Context, *ClassifyUpdateReq) (*ClassifyUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyUpdate not implemented")
}
func (UnimplementedWkfServer) ClassifyDelete(context.Context, *ClassifyDeleteReq) (*ClassifyDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyDelete not implemented")
}
func (UnimplementedWkfServer) mustEmbedUnimplementedWkfServer() {}

// UnsafeWkfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WkfServer will
// result in compilation errors.
type UnsafeWkfServer interface {
	mustEmbedUnimplementedWkfServer()
}

func RegisterWkfServer(s grpc.ServiceRegistrar, srv WkfServer) {
	s.RegisterService(&Wkf_ServiceDesc, srv)
}

func _Wkf_ClassifyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ClassifyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ClassifyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ClassifyList(ctx, req.(*ClassifyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ClassifyRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyRetrieveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ClassifyRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ClassifyRetrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ClassifyRetrieve(ctx, req.(*ClassifyRetrieveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ClassifyAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ClassifyAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ClassifyAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ClassifyAdd(ctx, req.(*ClassifyAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ClassifyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ClassifyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ClassifyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ClassifyUpdate(ctx, req.(*ClassifyUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wkf_ClassifyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassifyDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WkfServer).ClassifyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wkf.Wkf/ClassifyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WkfServer).ClassifyDelete(ctx, req.(*ClassifyDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Wkf_ServiceDesc is the grpc.ServiceDesc for Wkf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wkf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wkf.Wkf",
	HandlerType: (*WkfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassifyList",
			Handler:    _Wkf_ClassifyList_Handler,
		},
		{
			MethodName: "ClassifyRetrieve",
			Handler:    _Wkf_ClassifyRetrieve_Handler,
		},
		{
			MethodName: "ClassifyAdd",
			Handler:    _Wkf_ClassifyAdd_Handler,
		},
		{
			MethodName: "ClassifyUpdate",
			Handler:    _Wkf_ClassifyUpdate_Handler,
		},
		{
			MethodName: "ClassifyDelete",
			Handler:    _Wkf_ClassifyDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wkf.proto",
}
