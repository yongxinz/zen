// Code generated by goctl. DO NOT EDIT.
// Source: wkf.proto

package wkfclient

import (
	"context"

	"github.com/yongxin/zen/service/workflow/rpc/wkf"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ClassifyAddReq       = wkf.ClassifyAddReq
	ClassifyAddResp      = wkf.ClassifyAddResp
	ClassifyDeleteReq    = wkf.ClassifyDeleteReq
	ClassifyDeleteResp   = wkf.ClassifyDeleteResp
	ClassifyListData     = wkf.ClassifyListData
	ClassifyListReq      = wkf.ClassifyListReq
	ClassifyListResp     = wkf.ClassifyListResp
	ClassifyRetrieveReq  = wkf.ClassifyRetrieveReq
	ClassifyRetrieveResp = wkf.ClassifyRetrieveResp
	ClassifyUpdateReq    = wkf.ClassifyUpdateReq
	ClassifyUpdateResp   = wkf.ClassifyUpdateResp

	Wkf interface {
		ClassifyList(ctx context.Context, in *ClassifyListReq, opts ...grpc.CallOption) (*ClassifyListResp, error)
		ClassifyRetrieve(ctx context.Context, in *ClassifyRetrieveReq, opts ...grpc.CallOption) (*ClassifyRetrieveResp, error)
		ClassifyAdd(ctx context.Context, in *ClassifyAddReq, opts ...grpc.CallOption) (*ClassifyAddResp, error)
		ClassifyUpdate(ctx context.Context, in *ClassifyUpdateReq, opts ...grpc.CallOption) (*ClassifyUpdateResp, error)
		ClassifyDelete(ctx context.Context, in *ClassifyDeleteReq, opts ...grpc.CallOption) (*ClassifyDeleteResp, error)
	}

	defaultWkf struct {
		cli zrpc.Client
	}
)

func NewWkf(cli zrpc.Client) Wkf {
	return &defaultWkf{
		cli: cli,
	}
}

func (m *defaultWkf) ClassifyList(ctx context.Context, in *ClassifyListReq, opts ...grpc.CallOption) (*ClassifyListResp, error) {
	client := wkf.NewWkfClient(m.cli.Conn())
	return client.ClassifyList(ctx, in, opts...)
}

func (m *defaultWkf) ClassifyRetrieve(ctx context.Context, in *ClassifyRetrieveReq, opts ...grpc.CallOption) (*ClassifyRetrieveResp, error) {
	client := wkf.NewWkfClient(m.cli.Conn())
	return client.ClassifyRetrieve(ctx, in, opts...)
}

func (m *defaultWkf) ClassifyAdd(ctx context.Context, in *ClassifyAddReq, opts ...grpc.CallOption) (*ClassifyAddResp, error) {
	client := wkf.NewWkfClient(m.cli.Conn())
	return client.ClassifyAdd(ctx, in, opts...)
}

func (m *defaultWkf) ClassifyUpdate(ctx context.Context, in *ClassifyUpdateReq, opts ...grpc.CallOption) (*ClassifyUpdateResp, error) {
	client := wkf.NewWkfClient(m.cli.Conn())
	return client.ClassifyUpdate(ctx, in, opts...)
}

func (m *defaultWkf) ClassifyDelete(ctx context.Context, in *ClassifyDeleteReq, opts ...grpc.CallOption) (*ClassifyDeleteResp, error) {
	client := wkf.NewWkfClient(m.cli.Conn())
	return client.ClassifyDelete(ctx, in, opts...)
}
