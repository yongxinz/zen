// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wkfTicketFieldNames          = builder.RawFieldNames(&WkfTicket{})
	wkfTicketRows                = strings.Join(wkfTicketFieldNames, ",")
	wkfTicketRowsExpectAutoSet   = strings.Join(stringx.Remove(wkfTicketFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	wkfTicketRowsWithPlaceHolder = strings.Join(stringx.Remove(wkfTicketFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheWkfTicketIdPrefix = "cache:wkfTicket:id:"
)

type (
	wkfTicketModel interface {
		Insert(ctx context.Context, data *WkfTicket) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WkfTicket, error)
		Update(ctx context.Context, data *WkfTicket) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWkfTicketModel struct {
		sqlc.CachedConn
		table string
	}

	WkfTicket struct {
		Id            int64     `db:"id"`             // 编码
		ClassifyId    int64     `db:"classify_id"`    // 分类
		ProcessId     int64     `db:"process_id"`     // 流程
		IsEnd         int64     `db:"is_end"`         // 是否结束，0未结束，1已结束
		IsDenied      int64     `db:"is_denied"`      // 是否拒绝，0否，1是
		State         string    `db:"state"`          // 状态信息
		RelatedPerson string    `db:"related_person"` // 关联人员
		UrgeCount     int64     `db:"urge_count"`     // 催办次数
		UrgeLasttime  int64     `db:"urge_lasttime"`  // 上次催办时间
		CreateBy      int64     `db:"create_by"`      // 创建者
		UpdateBy      int64     `db:"update_by"`      // 更新者
		CreateAt      time.Time `db:"create_at"`      // 创建时间
		UpdateAt      time.Time `db:"update_at"`      // 更新时间
	}
)

func newWkfTicketModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultWkfTicketModel {
	return &defaultWkfTicketModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`wkf_ticket`",
	}
}

func (m *defaultWkfTicketModel) withSession(session sqlx.Session) *defaultWkfTicketModel {
	return &defaultWkfTicketModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`wkf_ticket`",
	}
}

func (m *defaultWkfTicketModel) Delete(ctx context.Context, id int64) error {
	wkfTicketIdKey := fmt.Sprintf("%s%v", cacheWkfTicketIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, wkfTicketIdKey)
	return err
}

func (m *defaultWkfTicketModel) FindOne(ctx context.Context, id int64) (*WkfTicket, error) {
	wkfTicketIdKey := fmt.Sprintf("%s%v", cacheWkfTicketIdPrefix, id)
	var resp WkfTicket
	err := m.QueryRowCtx(ctx, &resp, wkfTicketIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wkfTicketRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWkfTicketModel) Insert(ctx context.Context, data *WkfTicket) (sql.Result, error) {
	wkfTicketIdKey := fmt.Sprintf("%s%v", cacheWkfTicketIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, wkfTicketRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ClassifyId, data.ProcessId, data.IsEnd, data.IsDenied, data.State, data.RelatedPerson, data.UrgeCount, data.UrgeLasttime, data.CreateBy, data.UpdateBy)
	}, wkfTicketIdKey)
	return ret, err
}

func (m *defaultWkfTicketModel) Update(ctx context.Context, data *WkfTicket) error {
	wkfTicketIdKey := fmt.Sprintf("%s%v", cacheWkfTicketIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wkfTicketRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ClassifyId, data.ProcessId, data.IsEnd, data.IsDenied, data.State, data.RelatedPerson, data.UrgeCount, data.UrgeLasttime, data.CreateBy, data.UpdateBy, data.Id)
	}, wkfTicketIdKey)
	return err
}

func (m *defaultWkfTicketModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheWkfTicketIdPrefix, primary)
}

func (m *defaultWkfTicketModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wkfTicketRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWkfTicketModel) tableName() string {
	return m.table
}
