// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wkfCirculationFieldNames          = builder.RawFieldNames(&WkfCirculation{})
	wkfCirculationRows                = strings.Join(wkfCirculationFieldNames, ",")
	wkfCirculationRowsExpectAutoSet   = strings.Join(stringx.Remove(wkfCirculationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	wkfCirculationRowsWithPlaceHolder = strings.Join(stringx.Remove(wkfCirculationFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheWkfCirculationIdPrefix = "cache:wkfCirculation:id:"
)

type (
	wkfCirculationModel interface {
		Insert(ctx context.Context, data *WkfCirculation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WkfCirculation, error)
		Update(ctx context.Context, data *WkfCirculation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWkfCirculationModel struct {
		sqlc.CachedConn
		table string
	}

	WkfCirculation struct {
		Id           int64     `db:"id"`            // 编码
		TicketId     int64     `db:"ticket_id"`     // 工单ID
		State        string    `db:"state"`         // 状态信息
		Source       string    `db:"source"`        // 源节点
		Target       string    `db:"target"`        // 目标节点
		Circulation  string    `db:"circulation"`   // 流转信息
		Status       int64     `db:"status"`        // 流转状态，0拒绝，1同意，2其他
		HandlerId    int64     `db:"handler_id"`    // 处理人ID
		HandlerName  string    `db:"handler_name"`  // 处理人姓名
		CostDuration int64     `db:"cost_duration"` // 处理时长
		Remark       string    `db:"remark"`        // 备注
		CreateAt     time.Time `db:"create_at"`     // 创建时间
		UpdateAt     time.Time `db:"update_at"`     // 更新时间
	}
)

func newWkfCirculationModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultWkfCirculationModel {
	return &defaultWkfCirculationModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`wkf_circulation`",
	}
}

func (m *defaultWkfCirculationModel) withSession(session sqlx.Session) *defaultWkfCirculationModel {
	return &defaultWkfCirculationModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`wkf_circulation`",
	}
}

func (m *defaultWkfCirculationModel) Delete(ctx context.Context, id int64) error {
	wkfCirculationIdKey := fmt.Sprintf("%s%v", cacheWkfCirculationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, wkfCirculationIdKey)
	return err
}

func (m *defaultWkfCirculationModel) FindOne(ctx context.Context, id int64) (*WkfCirculation, error) {
	wkfCirculationIdKey := fmt.Sprintf("%s%v", cacheWkfCirculationIdPrefix, id)
	var resp WkfCirculation
	err := m.QueryRowCtx(ctx, &resp, wkfCirculationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wkfCirculationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWkfCirculationModel) Insert(ctx context.Context, data *WkfCirculation) (sql.Result, error) {
	wkfCirculationIdKey := fmt.Sprintf("%s%v", cacheWkfCirculationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, wkfCirculationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TicketId, data.State, data.Source, data.Target, data.Circulation, data.Status, data.HandlerId, data.HandlerName, data.CostDuration, data.Remark)
	}, wkfCirculationIdKey)
	return ret, err
}

func (m *defaultWkfCirculationModel) Update(ctx context.Context, data *WkfCirculation) error {
	wkfCirculationIdKey := fmt.Sprintf("%s%v", cacheWkfCirculationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wkfCirculationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TicketId, data.State, data.Source, data.Target, data.Circulation, data.Status, data.HandlerId, data.HandlerName, data.CostDuration, data.Remark, data.Id)
	}, wkfCirculationIdKey)
	return err
}

func (m *defaultWkfCirculationModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheWkfCirculationIdPrefix, primary)
}

func (m *defaultWkfCirculationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wkfCirculationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWkfCirculationModel) tableName() string {
	return m.table
}
