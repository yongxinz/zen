// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wkfTemplateFieldNames          = builder.RawFieldNames(&WkfTemplate{})
	wkfTemplateRows                = strings.Join(wkfTemplateFieldNames, ",")
	wkfTemplateRowsExpectAutoSet   = strings.Join(stringx.Remove(wkfTemplateFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	wkfTemplateRowsWithPlaceHolder = strings.Join(stringx.Remove(wkfTemplateFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheWkfTemplateIdPrefix   = "cache:wkfTemplate:id:"
	cacheWkfTemplateNamePrefix = "cache:wkfTemplate:name:"
)

type (
	wkfTemplateModel interface {
		Insert(ctx context.Context, data *WkfTemplate) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WkfTemplate, error)
		FindOneByName(ctx context.Context, name string) (*WkfTemplate, error)
		Update(ctx context.Context, data *WkfTemplate) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWkfTemplateModel struct {
		sqlc.CachedConn
		table string
	}

	WkfTemplate struct {
		Id            int64     `db:"id"`             // 编码
		Name          string    `db:"name"`           // 名称
		FormStructure string    `db:"form_structure"` // 模板结构
		Remark        string    `db:"remark"`         // 备注
		CreateBy      int64     `db:"create_by"`      // 创建者
		UpdateBy      int64     `db:"update_by"`      // 更新者
		CreateAt      time.Time `db:"create_at"`      // 创建时间
		UpdateAt      time.Time `db:"update_at"`      // 更新时间
	}
)

func newWkfTemplateModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultWkfTemplateModel {
	return &defaultWkfTemplateModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`wkf_template`",
	}
}

func (m *defaultWkfTemplateModel) withSession(session sqlx.Session) *defaultWkfTemplateModel {
	return &defaultWkfTemplateModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`wkf_template`",
	}
}

func (m *defaultWkfTemplateModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	wkfTemplateIdKey := fmt.Sprintf("%s%v", cacheWkfTemplateIdPrefix, id)
	wkfTemplateNameKey := fmt.Sprintf("%s%v", cacheWkfTemplateNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, wkfTemplateIdKey, wkfTemplateNameKey)
	return err
}

func (m *defaultWkfTemplateModel) FindOne(ctx context.Context, id int64) (*WkfTemplate, error) {
	wkfTemplateIdKey := fmt.Sprintf("%s%v", cacheWkfTemplateIdPrefix, id)
	var resp WkfTemplate
	err := m.QueryRowCtx(ctx, &resp, wkfTemplateIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wkfTemplateRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWkfTemplateModel) FindOneByName(ctx context.Context, name string) (*WkfTemplate, error) {
	wkfTemplateNameKey := fmt.Sprintf("%s%v", cacheWkfTemplateNamePrefix, name)
	var resp WkfTemplate
	err := m.QueryRowIndexCtx(ctx, &resp, wkfTemplateNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", wkfTemplateRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWkfTemplateModel) Insert(ctx context.Context, data *WkfTemplate) (sql.Result, error) {
	wkfTemplateIdKey := fmt.Sprintf("%s%v", cacheWkfTemplateIdPrefix, data.Id)
	wkfTemplateNameKey := fmt.Sprintf("%s%v", cacheWkfTemplateNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, wkfTemplateRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.FormStructure, data.Remark, data.CreateBy, data.UpdateBy)
	}, wkfTemplateIdKey, wkfTemplateNameKey)
	return ret, err
}

func (m *defaultWkfTemplateModel) Update(ctx context.Context, newData *WkfTemplate) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	wkfTemplateIdKey := fmt.Sprintf("%s%v", cacheWkfTemplateIdPrefix, data.Id)
	wkfTemplateNameKey := fmt.Sprintf("%s%v", cacheWkfTemplateNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wkfTemplateRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.FormStructure, newData.Remark, newData.CreateBy, newData.UpdateBy, newData.Id)
	}, wkfTemplateIdKey, wkfTemplateNameKey)
	return err
}

func (m *defaultWkfTemplateModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheWkfTemplateIdPrefix, primary)
}

func (m *defaultWkfTemplateModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wkfTemplateRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWkfTemplateModel) tableName() string {
	return m.table
}
