// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wkfExecutionFieldNames          = builder.RawFieldNames(&WkfExecution{})
	wkfExecutionRows                = strings.Join(wkfExecutionFieldNames, ",")
	wkfExecutionRowsExpectAutoSet   = strings.Join(stringx.Remove(wkfExecutionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	wkfExecutionRowsWithPlaceHolder = strings.Join(stringx.Remove(wkfExecutionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheWkfExecutionIdPrefix = "cache:wkfExecution:id:"
)

type (
	wkfExecutionModel interface {
		Insert(ctx context.Context, data *WkfExecution) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WkfExecution, error)
		Update(ctx context.Context, data *WkfExecution) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWkfExecutionModel struct {
		sqlc.CachedConn
		table string
	}

	WkfExecution struct {
		Id       int64     `db:"id"`        // 编码
		TaskId   int64     `db:"task_id"`   // 任务ID
		Name     string    `db:"name"`      // 任务名称
		Category string    `db:"category"`  // 任务类型
		Result   string    `db:"result"`    // 执行结果
		CreateAt time.Time `db:"create_at"` // 创建时间
	}
)

func newWkfExecutionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultWkfExecutionModel {
	return &defaultWkfExecutionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`wkf_execution`",
	}
}

func (m *defaultWkfExecutionModel) withSession(session sqlx.Session) *defaultWkfExecutionModel {
	return &defaultWkfExecutionModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`wkf_execution`",
	}
}

func (m *defaultWkfExecutionModel) Delete(ctx context.Context, id int64) error {
	wkfExecutionIdKey := fmt.Sprintf("%s%v", cacheWkfExecutionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, wkfExecutionIdKey)
	return err
}

func (m *defaultWkfExecutionModel) FindOne(ctx context.Context, id int64) (*WkfExecution, error) {
	wkfExecutionIdKey := fmt.Sprintf("%s%v", cacheWkfExecutionIdPrefix, id)
	var resp WkfExecution
	err := m.QueryRowCtx(ctx, &resp, wkfExecutionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wkfExecutionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWkfExecutionModel) Insert(ctx context.Context, data *WkfExecution) (sql.Result, error) {
	wkfExecutionIdKey := fmt.Sprintf("%s%v", cacheWkfExecutionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, wkfExecutionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TaskId, data.Name, data.Category, data.Result)
	}, wkfExecutionIdKey)
	return ret, err
}

func (m *defaultWkfExecutionModel) Update(ctx context.Context, data *WkfExecution) error {
	wkfExecutionIdKey := fmt.Sprintf("%s%v", cacheWkfExecutionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wkfExecutionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TaskId, data.Name, data.Category, data.Result, data.Id)
	}, wkfExecutionIdKey)
	return err
}

func (m *defaultWkfExecutionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheWkfExecutionIdPrefix, primary)
}

func (m *defaultWkfExecutionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wkfExecutionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWkfExecutionModel) tableName() string {
	return m.table
}
