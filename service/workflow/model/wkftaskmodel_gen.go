// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wkfTaskFieldNames          = builder.RawFieldNames(&WkfTask{})
	wkfTaskRows                = strings.Join(wkfTaskFieldNames, ",")
	wkfTaskRowsExpectAutoSet   = strings.Join(stringx.Remove(wkfTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	wkfTaskRowsWithPlaceHolder = strings.Join(stringx.Remove(wkfTaskFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheWkfTaskIdPrefix = "cache:wkfTask:id:"
)

type (
	wkfTaskModel interface {
		Insert(ctx context.Context, data *WkfTask) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WkfTask, error)
		Update(ctx context.Context, data *WkfTask) error
		Delete(ctx context.Context, id int64) error
	}

	defaultWkfTaskModel struct {
		sqlc.CachedConn
		table string
	}

	WkfTask struct {
		Id       int64     `db:"id"`        // 编码
		Name     string    `db:"name"`      // 名称
		Category string    `db:"category"`  // 类型
		Content  string    `db:"content"`   // 内容
		Remark   string    `db:"remark"`    // 备注
		CreateBy int64     `db:"create_by"` // 创建者
		UpdateBy int64     `db:"update_by"` // 更新者
		CreateAt time.Time `db:"create_at"` // 创建时间
		UpdateAt time.Time `db:"update_at"` // 更新时间
	}
)

func newWkfTaskModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultWkfTaskModel {
	return &defaultWkfTaskModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`wkf_task`",
	}
}

func (m *defaultWkfTaskModel) withSession(session sqlx.Session) *defaultWkfTaskModel {
	return &defaultWkfTaskModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`wkf_task`",
	}
}

func (m *defaultWkfTaskModel) Delete(ctx context.Context, id int64) error {
	wkfTaskIdKey := fmt.Sprintf("%s%v", cacheWkfTaskIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, wkfTaskIdKey)
	return err
}

func (m *defaultWkfTaskModel) FindOne(ctx context.Context, id int64) (*WkfTask, error) {
	wkfTaskIdKey := fmt.Sprintf("%s%v", cacheWkfTaskIdPrefix, id)
	var resp WkfTask
	err := m.QueryRowCtx(ctx, &resp, wkfTaskIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wkfTaskRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWkfTaskModel) Insert(ctx context.Context, data *WkfTask) (sql.Result, error) {
	wkfTaskIdKey := fmt.Sprintf("%s%v", cacheWkfTaskIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, wkfTaskRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Category, data.Content, data.Remark, data.CreateBy, data.UpdateBy)
	}, wkfTaskIdKey)
	return ret, err
}

func (m *defaultWkfTaskModel) Update(ctx context.Context, data *WkfTask) error {
	wkfTaskIdKey := fmt.Sprintf("%s%v", cacheWkfTaskIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wkfTaskRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Category, data.Content, data.Remark, data.CreateBy, data.UpdateBy, data.Id)
	}, wkfTaskIdKey)
	return err
}

func (m *defaultWkfTaskModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheWkfTaskIdPrefix, primary)
}

func (m *defaultWkfTaskModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wkfTaskRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWkfTaskModel) tableName() string {
	return m.table
}
